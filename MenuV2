--// Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

--// GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "GameModMenu"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Frame with modern design
local mainFrame = Ins--// Execute button with updated text and mobile support
    local runButton = Instance.new("TextButton")
    runButton.Size = UDim2.new(0.15, 0, 0.3, 0)
    runButton.Position = UDim2.new(0.83, 0, 0.65, 0)  -- Aligned with EVENT/FUNCTION label
    runButton.Text = "RUN"
    runButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    runButton.TextColor3 = Color3.new(1, 1, 1)
    runButton.Font = Enum.Font.GothamBold
    runButton.TextSize = 12
    runButton.Parent = container
    runButton.AutoButtonColor = true -- Better visual feedback on mobile"Frame")
mainFrame.Size = UDim2.new(0, 500, 0, 400)  -- Reduced size
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -200)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Add rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = mainFrame

-- Add subtle shadow effect
local shadow = Instance.new("Frame")
shadow.Size = UDim2.new(1, 6, 1, 6)
shadow.Position = UDim2.new(0, -3, 0, -3)
shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
shadow.BackgroundTransparency = 0.7
shadow.ZIndex = -1
shadow.Parent = mainFrame

local shadowCorner = Instance.new("UICorner")
shadowCorner.CornerRadius = UDim.new(0, 12)
shadowCorner.Parent = shadow

-- Title bar with gradient
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 40)  -- Reduced height
titleBar.BackgroundColor3 = Color3.fromRGB(45, 45, 65)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 12)
titleCorner.Parent = titleBar

-- Title with icon
local title = Instance.new("TextLabel")
title.Text = "üéÆ Game Mod Menu"
title.Size = UDim2.new(1, -150, 1, 0)  -- Adjusted for buttons
title.Position = UDim2.new(0, 20, 0, 0)
title.BackgroundTransparency = 1
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.GothamBold
title.TextSize = 16  -- Reduced size
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Minimize button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -70, 0, 5)
minimizeButton.Text = "‚îÄ"
minimizeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
minimizeButton.TextColor3 = Color3.new(1, 1, 1)
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.TextSize = 16
minimizeButton.Parent = titleBar

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeButton

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.Text = "√ó"
closeButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 20
closeButton.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeButton

-- Search bar
local searchBar = Instance.new("TextBox")
searchBar.Size = UDim2.new(0, 150, 0, 30)
searchBar.Position = UDim2.new(1, -190, 0, 5)
searchBar.PlaceholderText = "üîç Search..."
searchBar.Text = ""
searchBar.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
searchBar.TextColor3 = Color3.new(1, 1, 1)
searchBar.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
searchBar.Font = Enum.Font.Gotham
searchBar.TextSize = 14
searchBar.Parent = titleBar

local searchCorner = Instance.new("UICorner")
searchCorner.CornerRadius = UDim.new(0, 6)
searchCorner.Parent = searchBar

-- Create tab system with scrolling
local tabContainer = Instance.new("ScrollingFrame")
tabContainer.Size = UDim2.new(1, -20, 0, 40)
tabContainer.Position = UDim2.new(0, 10, 0, 60)
tabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
tabContainer.BorderSizePixel = 0
tabContainer.ScrollBarThickness = 4
tabContainer.ScrollingDirection = Enum.ScrollingDirection.X
tabContainer.Parent = mainFrame

local tabCorner = Instance.new("UICorner")
tabCorner.CornerRadius = UDim.new(0, 8)
tabCorner.Parent = tabContainer

local tabLayout = Instance.new("UIListLayout")
tabLayout.FillDirection = Enum.FillDirection.Horizontal
tabLayout.Padding = UDim.new(0, 5)
tabLayout.Parent = tabContainer

-- Update canvas size when tabs are added
tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    tabContainer.CanvasSize = UDim2.new(0, tabLayout.AbsoluteContentSize.X + 10, 0, 0)
end)

-- Content container for each tab
local contentContainer = Instance.new("Frame")
contentContainer.Size = UDim2.new(1, -20, 1, -110)
contentContainer.Position = UDim2.new(0, 10, 0, 110)
contentContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
contentContainer.BorderSizePixel = 0
contentContainer.Parent = mainFrame

local contentCorner = Instance.new("UICorner")
contentCorner.CornerRadius = UDim.new(0, 8)
contentCorner.Parent = contentContainer

-- Create tab pages with improved layout
local tabPages = {}
local activeTab = nil
local tabs = {
    {name = "Give", color = Color3.fromRGB(85, 170, 255)},
    {name = "Stats", color = Color3.fromRGB(255, 85, 255)},
    {name = "Currency", color = Color3.fromRGB(255, 170, 0)},
    {name = "Combat", color = Color3.fromRGB(255, 85, 85)},
    {name = "Teleport", color = Color3.fromRGB(85, 255, 127)},
    {name = "Player", color = Color3.fromRGB(170, 170, 255)},
    {name = "Game", color = Color3.fromRGB(170, 85, 255)},  -- Added for gamemode remotes
    {name = "Favorites", color = Color3.fromRGB(255, 223, 85)},
    {name = "Other", color = Color3.fromRGB(170, 170, 170)}
}

for _, tabInfo in ipairs(tabs) do
    -- Create tab button with fixed width
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(0, 100, 1, -10)
    tabButton.Position = UDim2.new(0, 5, 0, 5)
    tabButton.BackgroundColor3 = tabInfo.color
    tabButton.BackgroundTransparency = 0.5
    tabButton.Text = tabInfo.name
    tabButton.TextColor3 = Color3.new(1, 1, 1)
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextSize = 14
    tabButton.Parent = tabContainer
    
    local tabButtonCorner = Instance.new("UICorner")
    tabButtonCorner.CornerRadius = UDim.new(0, 6)
    tabButtonCorner.Parent = tabButton
    
    -- Create content page with auto-sizing
    local contentPage = Instance.new("ScrollingFrame")
    contentPage.Size = UDim2.new(1, -10, 1, -10)
    contentPage.Position = UDim2.new(0, 5, 0, 5)
    contentPage.BackgroundTransparency = 1
    contentPage.BorderSizePixel = 0
    contentPage.ScrollBarThickness = 6
    contentPage.Visible = false
    contentPage.Parent = contentContainer
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = contentPage
    
    -- Auto-update content size
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentPage.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 10)
    end)
    
    tabPages[tabInfo.name:lower()] = {
        button = tabButton,
        page = contentPage,
        layout = contentLayout
    }
    
    -- Tab button click handler with visual feedback
    tabButton.MouseButton1Click:Connect(function()
        if activeTab then
            activeTab.button.BackgroundTransparency = 0.5
            activeTab.page.Visible = false
        end
        activeTab = tabPages[tabInfo.name:lower()]
        activeTab.button.BackgroundTransparency = 0
        activeTab.page.Visible = true
        
        -- Visual feedback
        local originalColor = tabButton.BackgroundColor3
        tabButton.BackgroundColor3 = Color3.new(
            math.min(1, originalColor.R * 1.2),
            math.min(1, originalColor.G * 1.2),
            math.min(1, originalColor.B * 1.2)
        )
        wait(0.2)
        tabButton.BackgroundColor3 = originalColor
    end)
end

-- Set initial active tab
activeTab = tabPages["give"]
activeTab.button.BackgroundTransparency = 0
activeTab.page.Visible = true

--// Enhanced keyword detection with categories
local keywords = {
    give = {
        "Give", "Add", "Reward", "Grant", "Create", "Spawn", "Generate", "Award", "Gift",
        "Present", "Bonus", "Prize", "Drop", "Obtain", "Collect", "Get", "Item", "Equip",
        "Tool", "Gear", "Package", "Box", "Crate", "Supply", "Inventory", "Backpack",
        "Reward", "Loot", "Chest", "Kit", "Pack", "Bundle", "Unlock", "Achievement"
    },
    stats = {
        "Stat", "Stats", "XP", "Exp", "Experience", "Level", "Lvl", "Points", "Score", 
        "Upgrade", "Update", "Change", "Modify", "Set", "Boost", "Progress",
        "Speed", "Jump", "Health", "Power", "Strength", "Ability", "Skill", "Talent",
        "Attribute", "Property", "Value", "Rating", "Rank", "Grade", "Tier", "Class",
        "Mastery", "Proficiency", "Expertise", "Training", "Performance", "Capability"
    },
    currency = {
        "Coins", "Cash", "Money", "Gold", "Silver", "Credits", "Gems", "Diamonds", 
        "Tokens", "Currency", "Wallet", "Bank", "Purchase", "Buy", "Sell", "Trade",
        "Robux", "Bucks", "Dollars", "Premium", "VIP", "Balance", "Points", "Stars",
        "Crystal", "Pearl", "Ruby", "Emerald", "Sapphire", "Stone", "Jewel", "Resource",
        "Exchange", "Market", "Shop", "Store", "Price", "Cost", "Worth", "Value"
    },
    combat = {
        "Health", "HP", "Damage", "Attack", "Defense", "Strength", "Power", "Kill",
        "Death", "Weapon", "Armor", "Shield", "Combat", "Fight", "Battle", "War",
        "Energy", "Mana", "Stamina", "Rage", "Magic", "Spell", "Skill", "Hit",
        "Critical", "Block", "Parry", "Dodge", "Evade", "Strike", "Slash", "Pierce",
        "Stab", "Shoot", "Fire", "Launch", "Throw", "Cast", "Ability", "Ultimate",
        "Special", "Combo", "Chain", "Multiplier", "Buff", "Debuff", "Status", "Effect"
    },
    teleport = {
        "Teleport", "TP", "Warp", "Travel", "Move", "Goto", "Location", "Place",
        "Area", "Zone", "Region", "Spawn", "Position", "Portal", "Transport",
        "Destination", "Point", "Checkpoint", "Waypoint", "Marker", "Site", "Spot",
        "Map", "World", "Realm", "Dimension", "Universe", "Space", "Room", "Chamber",
        "Hall", "Corridor", "Path", "Route", "Track", "Trail", "Bridge", "Gate"
    },
    player = {
        "Player", "Character", "User", "Client", "Local", "Account", "Profile",
        "Save", "Load", "Data", "Stats", "Info", "Settings", "Config", "Preferences",
        "Options", "Menu", "Interface", "GUI", "HUD", "Display", "Screen", "View",
        "Camera", "Perspective", "Angle", "Direction", "Orientation", "Position",
        "Transform", "State", "Mode", "Status", "Condition", "Appearance", "Look"
    },
    gamemode = {
        "Game", "Mode", "Round", "Match", "Event", "Quest", "Mission", "Task",
        "Challenge", "Trial", "Test", "Stage", "Phase", "Level", "Difficulty",
        "Setting", "Rule", "Condition", "State", "Status", "Progress", "Start",
        "End", "Finish", "Complete", "Win", "Lose", "Draw", "Tie", "Score"
    }
}

-- Path-based categorization
local pathKeywords = {
    give = {
        "Giver", "Rewards", "Items", "Inventory", "Collect", "Loot", "Drop", "Spawn",
        "Equipment", "Gear", "Tools", "Weapons", "Supplies", "Resources", "Assets"
    },
    stats = {
        "Stats", "Skills", "Attributes", "Properties", "Status", "Levels", "Experience",
        "Progress", "Achievements", "Rankings", "Leaderboard", "Performance", "Analytics"
    },
    currency = {
        "Shop", "Store", "Market", "Economy", "Trading", "Exchange", "Bank", "Wallet",
        "Purchase", "Transaction", "Payment", "Premium", "VIP", "Membership"
    },
    combat = {
        "Combat", "Battle", "Fighting", "PvP", "Weapons", "Arena", "Battlefield",
        "Warzone", "Duel", "Match", "Tournament", "Competition", "Challenge"
    },
    teleport = {
        "Teleport", "Transport", "Travel", "Locations", "Waypoints", "Destinations",
        "Maps", "Worlds", "Areas", "Zones", "Regions", "Places", "Spots"
    },
    player = {
        "Player", "Character", "User", "Profile", "Account", "Data", "Progress",
        "Statistics", "Settings", "Preferences", "Configuration", "State"
    },
    gamemode = {
        "GameMode", "Rounds", "Matches", "Events", "Missions", "Quests", "Tasks",
        "Challenges", "Stages", "Phases", "Levels", "Difficulties"
    }
}

--// Get remote category with fallback
local function getRemoteCategory(remote)
    if not remote then return "other" end
    
    local fullPath = remote:GetFullName():lower()
    local name = remote.Name:lower()
    
    -- First check path-based categorization
    for category, paths in pairs(pathKeywords) do
        for _, path in ipairs(paths) do
            if string.find(fullPath, path:lower()) then
                -- Map gamemode to game
                if category == "gamemode" then return "game" end
                return category
            end
        end
    end
    
    -- Then check name-based keywords
    for category, keywordList in pairs(keywords) do
        for _, keyword in ipairs(keywordList) do
            if string.find(name, keyword:lower()) then
                -- Map gamemode to game
                if category == "gamemode" then return "game" end
                return category
            end
        end
    end
    
    return "other"
end

--// Parse argument input into Lua values with better security
local function parseArgs(argText)
    if not argText or argText == "" then return {} end
    
    -- Basic validation
    if string.match(argText, "[^%w%s,%.\"'%-_%[%]{}]") then
        return {}  -- Return empty if suspicious characters found
    end
    
    local success, args = pcall(function()
        -- Create a safe wrapper
        local code = "return {" .. argText .. "}"
        local fn, err = loadstring(code)
        if not fn then return {} end
        
        -- Execute in protected mode
        local ok, result = pcall(fn)
        return ok and result or {}
    end)
    
    return success and args or {}
end

-- Initialize favorites table if it doesn't exist
local favorites = {}

-- Initialize preset arguments
local presetArgs = {
    Give = {"amount", "itemName", "quantity", "1", "true"},
    Stats = {"value", "amount", "10", "100", "max"},
    Currency = {"amount", "1000", "10000", "100000"},
    Combat = {"damage", "100", "weapon", "true"},
    Teleport = {"position", "place", "location", "spawn"},
    Player = {"name", "value", "setting", "true", "false"}
}

-- Filter function to check if remote belongs to the local player
local function isPlayerRemote(remote)
    local path = remote:GetFullName():lower()
    local playerName = Players.LocalPlayer.Name:lower()
    
    -- Check if remote is in player's character or backpack
    if string.find(path, playerName) then
        return true
    end
    
    -- Check if remote is in ReplicatedStorage (shared remotes)
    if string.find(path, "replicatedstorage") then
        return true
    end
    
    -- Check if remote is in StarterGui or StarterPlayer (UI related)
    if string.find(path, "startergui") or string.find(path, "starterplayer") then
        return true
    end
    
    return false
end

--// Add remote to UI (improved version with better organization)
local function addRemote(remote)
    -- Basic validation with error handling
    local success, result = pcall(function()
        if not remote or not remote:IsA("RemoteEvent") and not remote:IsA("RemoteFunction") then 
            return false
        end
        
        -- Only show remotes relevant to the local player
        if not isPlayerRemote(remote) then
            return false
        end
        
        return true
    end)
    
    if not success or not result then
        warn("Failed to add remote:", remote and remote:GetFullName() or "nil")
        return
    end
    
    -- Get category and validate tab page exists
    local category = getRemoteCategory(remote)
    local tabPage = tabPages[category:lower()]
    if not tabPage or not tabPage.page then
        tabPage = tabPages["other"]
        if not tabPage then return end
    end
    
    -- Create container
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -10, 0, 70)
    container.BorderSizePixel = 0
    container.Name = remote.Name
    container.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    container.Parent = tabPage.page

    -- Add rounded corners
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 6)
    containerCorner.Parent = container

    -- Create main elements
    -- Name label
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(0.6, 0, 0.4, 0)
    nameLabel.Position = UDim2.new(0, 10, 0, 5)
    nameLabel.Text = remote.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextSize = 14
    nameLabel.TextWrapped = true
    nameLabel.Parent = container

    -- Path label
    local fullPath = remote:GetFullName()
    local shortPath = fullPath:gsub(remote.Name .. "$", "")
    if #shortPath > 40 then
        shortPath = "..." .. shortPath:sub(-37)
    end

    local pathLabel = Instance.new("TextLabel")
    pathLabel.Size = UDim2.new(0.6, 0, 0.3, 0)
    pathLabel.Position = UDim2.new(0, 10, 0.4, 0)
    pathLabel.Text = shortPath
    pathLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    pathLabel.BackgroundTransparency = 1
    pathLabel.TextXAlignment = Enum.TextXAlignment.Left
    pathLabel.Font = Enum.Font.Gotham
    pathLabel.TextSize = 10
    pathLabel.TextWrapped = true
    pathLabel.Parent = container

    -- Type indicator with aligned position
    local typeLabel = Instance.new("TextLabel")
    typeLabel.Size = UDim2.new(0.15, 0, 0.3, 0)
    typeLabel.Position = UDim2.new(0.83, 0, 0.1, 0)  -- Aligned with RUN button
    local isEvent = remote:IsA("RemoteEvent")
    typeLabel.Text = isEvent and "EVENT" or "FUNCTION"
    typeLabel.BackgroundColor3 = isEvent and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(200, 100, 200)
    typeLabel.TextColor3 = Color3.new(1, 1, 1)
    typeLabel.Font = Enum.Font.GothamBold
    typeLabel.TextSize = 10
    typeLabel.TextXAlignment = Enum.TextXAlignment.Center
    typeLabel.Parent = container

    local typeCorner = Instance.new("UICorner")
    typeCorner.CornerRadius = UDim.new(0, 3)
    typeCorner.Parent = typeLabel

    -- Arguments input
    local argsInput = Instance.new("TextBox")
    argsInput.Size = UDim2.new(0.7, 0, 0.3, 0)
    argsInput.Position = UDim2.new(0, 10, 0.65, 0)
    argsInput.PlaceholderText = "Arguments (e.g., \"value\", 100, true)"
    argsInput.Text = ""
    argsInput.TextColor3 = Color3.new(1, 1, 1)
    argsInput.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
    argsInput.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    argsInput.Font = Enum.Font.Gotham
    argsInput.TextSize = 12
    argsInput.Parent = container

    local argsCorner = Instance.new("UICorner")
    argsCorner.CornerRadius = UDim.new(0, 4)
    argsCorner.Parent = argsInput

    -- Execute button with updated text
    local runButton = Instance.new("TextButton")
    runButton.Size = UDim2.new(0.15, 0, 0.3, 0)
    runButton.Position = UDim2.new(0.83, 0, 0.65, 0)  -- Aligned with EVENT/FUNCTION label
    runButton.Text = "RUN"
    runButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    runButton.TextColor3 = Color3.new(1, 1, 1)
    runButton.Font = Enum.Font.GothamBold
    runButton.TextSize = 12
    runButton.Parent = container

    local runCorner = Instance.new("UICorner")
    runCorner.CornerRadius = UDim.new(0, 4)
    runCorner.Parent = runButton

    -- Add execute functionality with better error handling and mobile support
    local function executeRemote()
        local success, result = pcall(function()
            local args = parseArgs(argsInput.Text)
            
            if remote:IsA("RemoteEvent") then
                remote:FireServer(unpack(args))
                return "Remote event fired successfully"
            else
                local result = remote:InvokeServer(unpack(args))
                return result or "Remote function called successfully"
            end
        end)
        
        if not success then
            warn("Failed to execute remote:", result)
            -- Visual feedback for error
            local originalColor = runButton.BackgroundColor3
            runButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            task.wait(0.3)
            runButton.BackgroundColor3 = originalColor
        else
            -- Visual feedback for success
            local originalColor = runButton.BackgroundColor3
            runButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            task.wait(0.3)
            runButton.BackgroundColor3 = originalColor
            print("Success:", result)
        end
    end
    
    -- Add both mouse and touch support
    runButton.MouseButton1Click:Connect(executeRemote)
    runButton.TouchTap:Connect(executeRemote)
    
    -- Make button more touch-friendly if on mobile
    if UserInputService.TouchEnabled then
        runButton.Size = UDim2.new(0.2, 0, 0.3, 0) -- Slightly larger touch target
    end

    -- Update content size
    local contentSize = tabPage.layout.AbsoluteContentSize
    if contentSize then
        tabPage.page.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 10)
    end
end

--// Simplified scan function
local function scan(container)
    if not container then return end
    
    -- Scan existing remotes
    for _, obj in ipairs(container:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            addRemote(obj)
        end
    end
    
    -- Watch for new remotes
    container.DescendantAdded:Connect(function(obj)
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            addRemote(obj)
        end
    end)
end

-- Start scanning process
local function startScanning()
    title.Text = "üîÑ Scanning game..."
    
    local locations = {
        game:GetService("ReplicatedStorage"),
        game:GetService("StarterGui"),
        game:GetService("StarterPlayer"),
        game:GetService("Workspace")
    }
    
    for _, location in ipairs(locations) do
        if location then
            scan(location)
        end
    end
    
    title.Text = "üéÆ Game Mod Menu"
end

-- Start the scanning process
task.spawn(startScanning)

--// Close button functionality
closeButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = UDim2.new(0, 0, 0, 0)})
    tween:Play()
    tween.Completed:Connect(function()
        screenGui:Destroy()
    end)
end)

-- Minimize functionality with mobile support
local minimized = false
local originalSize = mainFrame.Size
local originalContentSize = contentContainer.Size
local originalContentPos = contentContainer.Position

local function toggleMinimize()
    minimized = not minimized
    local targetSize = minimized and UDim2.new(0, 500, 0, 40) or originalSize
    local targetContentSize = minimized and UDim2.new(1, -20, 0, 0) or originalContentSize
    local targetContentPos = minimized and UDim2.new(0, 10, 0, 40) or originalContentPos
    
    -- Animate size change
    TweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = targetSize}):Play()
    TweenService:Create(contentContainer, TweenInfo.new(0.3), {
        Size = targetContentSize,
        Position = targetContentPos
    }):Play()
    
    -- Update button text and size for mobile
    minimizeButton.Text = minimized and "+" or "‚îÄ"
    
    -- Hide/Show elements
    tabContainer.Visible = not minimized
    contentContainer.Visible = not minimized
end

-- Add both mouse and touch support for minimize button
minimizeButton.MouseButton1Click:Connect(toggleMinimize)
minimizeButton.TouchTap:Connect(toggleMinimize)

-- Make minimize button more visible on mobile
if UserInputService.TouchEnabled then
    minimizeButton.Size = UDim2.new(0, 40, 0, 30) -- Larger touch target
    minimizeButton.TextSize = 20 -- Larger text
    minimizeButton.Position = UDim2.new(1, -80, 0, 5) -- Adjust position
end

--// Scan for remotes (fixed version)
local function scan(container)
    if not container or typeof(container) ~= "Instance" then
        warn("Invalid container provided to scan function")
        return
    end
    
    local function addRemoteIfValid(obj)
        if not obj or not obj.Parent then return end
        
        local success, err = pcall(function()
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                task.spawn(function()
                    addRemote(obj)
                end)
            end
        end)
        
        if not success then
            warn("Failed to process remote: " .. obj:GetFullName() .. " - " .. tostring(err))
        end
    end
    
    -- Scan existing objects with error handling
    local success, err = pcall(function()
        for _, obj in ipairs(container:GetDescendants()) do
            addRemoteIfValid(obj)
        end
    end)
    
    if not success then
        warn("Failed to scan container: " .. container:GetFullName() .. " - " .. tostring(err))
    end
    
    -- Watch for new objects with error handling
    container.DescendantAdded:Connect(function(obj)
        addRemoteIfValid(obj)
    end)
end

-- Start scanning with proper error handling and status updates
title.Text = "üîÑ Scanning game..."

local function scanGame()
    local scanLocations = {
        game:GetService("ReplicatedStorage"),
        game:GetService("StarterGui"),
        game:GetService("StarterPlayer"),
        game:GetService("Workspace"),
        game:GetService("ReplicatedFirst"),
        game:GetService("StarterPack")
    }
    
    local successCount = 0
    for _, location in ipairs(scanLocations) do
        local success = pcall(function()
            if location then
                scan(location)
                successCount = successCount + 1
            end
        end)
        
        if not success then
            warn("Failed to scan location: " .. location.Name)
        end
    end
    
    -- Update title based on scan results
    if successCount == #scanLocations then
        title.Text = "üéÆ Game Mod Menu"
        print("‚úÖ Game Mod Menu loaded successfully!")
    else
        title.Text = "üéÆ Game Mod Menu (Partial Scan)"
        warn("‚ö†Ô∏è Some locations could not be scanned (" .. successCount .. "/" .. #scanLocations .. " successful)")
    end
end

-- Run scanning in protected thread
task.spawn(function()
    local success, err = pcall(scanGame)
    if not success then
        warn("‚ùå Critical error during scanning: " .. tostring(err))
        title.Text = "üéÆ Game Mod Menu (Error)"
    end
end)

-- Make draggable (with mobile support)
local dragging = false
local dragStart = nil
local startPos = nil
local isMobile = UserInputService.TouchEnabled

local function beginDrag(input)
    dragging = true
    dragStart = input.Position
    startPos = mainFrame.Position
end

local function updateDrag(input)
    if dragging then
        local delta = input.Position - dragStart
        local newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        -- Add bounds checking to keep GUI on screen
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local frameSize = mainFrame.AbsoluteSize
        newPosition = UDim2.new(
            newPosition.X.Scale,
            math.clamp(newPosition.X.Offset, 0, viewportSize.X - frameSize.X),
            newPosition.Y.Scale,
            math.clamp(newPosition.Y.Offset, 0, viewportSize.Y - frameSize.Y)
        )
        mainFrame.Position = newPosition
    end
end

local function endDrag()
    dragging = false
end

-- Mouse support
titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        beginDrag(input)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        updateDrag(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        endDrag()
    end
end)

-- Touch support
titleBar.TouchStarted:Connect(beginDrag)
titleBar.TouchMoved:Connect(updateDrag)
titleBar.TouchEnded:Connect(endDrag)

--// Start scanning
title.Text = "üîÑ Scanning game..."
wait(0.5)
scan(game.ReplicatedStorage)
scan(game.Workspace)
scan(game:GetService("StarterGui"))
scan(game:GetService("StarterPlayer"))

title.Text = "üéÆ Game Mod Menu"
print("üéÆ Game Mod Menu loaded successfully!")

--// Scan for remotes
local function scan(container)
    for _, obj in ipairs(container:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            addRemote(obj)
        end
    end
    container.DescendantAdded:Connect(function(obj)
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            addRemote(obj)
        end
    end)
end
